// Code generated by protoc-gen-go. DO NOT EDIT.
// source: demo.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	demo.proto

It has these top-level messages:
	RequestInfo
	ResponseInfo
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type RequestInfo struct {
	Pid     int32  `protobuf:"varint,1,opt,name=Pid" json:"Pid,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=Content" json:"Content,omitempty"`
}

func (m *RequestInfo) Reset()                    { *m = RequestInfo{} }
func (m *RequestInfo) String() string            { return proto1.CompactTextString(m) }
func (*RequestInfo) ProtoMessage()               {}
func (*RequestInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestInfo) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *RequestInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ResponseInfo struct {
	Code   int32  `protobuf:"varint,1,opt,name=Code" json:"Code,omitempty"`
	Result string `protobuf:"bytes,2,opt,name=Result" json:"Result,omitempty"`
}

func (m *ResponseInfo) Reset()                    { *m = ResponseInfo{} }
func (m *ResponseInfo) String() string            { return proto1.CompactTextString(m) }
func (*ResponseInfo) ProtoMessage()               {}
func (*ResponseInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResponseInfo) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ResponseInfo) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto1.RegisterType((*RequestInfo)(nil), "proto.RequestInfo")
	proto1.RegisterType((*ResponseInfo)(nil), "proto.ResponseInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Model service

type ModelClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (Model_StreamClient, error)
	Single(ctx context.Context, in *RequestInfo, opts ...grpc.CallOption) (*ResponseInfo, error)
}

type modelClient struct {
	cc *grpc.ClientConn
}

func NewModelClient(cc *grpc.ClientConn) ModelClient {
	return &modelClient{cc}
}

func (c *modelClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Model_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Model_serviceDesc.Streams[0], c.cc, "/proto.Model/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelStreamClient{stream}
	return x, nil
}

type Model_StreamClient interface {
	Send(*RequestInfo) error
	Recv() (*ResponseInfo, error)
	grpc.ClientStream
}

type modelStreamClient struct {
	grpc.ClientStream
}

func (x *modelStreamClient) Send(m *RequestInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelStreamClient) Recv() (*ResponseInfo, error) {
	m := new(ResponseInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelClient) Single(ctx context.Context, in *RequestInfo, opts ...grpc.CallOption) (*ResponseInfo, error) {
	out := new(ResponseInfo)
	err := grpc.Invoke(ctx, "/proto.Model/Single", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Model service

type ModelServer interface {
	Stream(Model_StreamServer) error
	Single(context.Context, *RequestInfo) (*ResponseInfo, error)
}

func RegisterModelServer(s *grpc.Server, srv ModelServer) {
	s.RegisterService(&_Model_serviceDesc, srv)
}

func _Model_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelServer).Stream(&modelStreamServer{stream})
}

type Model_StreamServer interface {
	Send(*ResponseInfo) error
	Recv() (*RequestInfo, error)
	grpc.ServerStream
}

type modelStreamServer struct {
	grpc.ServerStream
}

func (x *modelStreamServer) Send(m *ResponseInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelStreamServer) Recv() (*RequestInfo, error) {
	m := new(RequestInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Model_Single_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).Single(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Model/Single",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).Single(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Model_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Model",
	HandlerType: (*ModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Single",
			Handler:    _Model_Single_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Model_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "demo.proto",
}

func init() { proto1.RegisterFile("demo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x49, 0xcd, 0xcd,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x96, 0x5c, 0xdc, 0x41, 0xa9,
	0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x9e, 0x79, 0x69, 0xf9, 0x42, 0x02, 0x5c, 0xcc, 0x01, 0x99, 0x29,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x20, 0xa6, 0x90, 0x04, 0x17, 0xbb, 0x73, 0x7e, 0x5e,
	0x49, 0x6a, 0x5e, 0x89, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x8c, 0xab, 0x64, 0xc5, 0xc5,
	0x13, 0x94, 0x5a, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x0a, 0xd6, 0x2b, 0xc4, 0xc5, 0xe2, 0x9c, 0x9f,
	0x92, 0x0a, 0xd5, 0x0c, 0x66, 0x0b, 0x89, 0x71, 0xb1, 0x05, 0xa5, 0x16, 0x97, 0xe6, 0xc0, 0x34,
	0x43, 0x79, 0x46, 0xa5, 0x5c, 0xac, 0xbe, 0xf9, 0x29, 0xa9, 0x39, 0x42, 0xe6, 0x5c, 0x6c, 0xc1,
	0x25, 0x45, 0xa9, 0x89, 0xb9, 0x42, 0x42, 0x10, 0x87, 0xe9, 0x21, 0x39, 0x47, 0x4a, 0x18, 0x2e,
	0x86, 0xb0, 0x47, 0x89, 0x41, 0x83, 0xd1, 0x80, 0x51, 0xc8, 0x98, 0x8b, 0x2d, 0x38, 0x33, 0x2f,
	0x3d, 0x27, 0x95, 0x04, 0x8d, 0x49, 0x6c, 0x60, 0x51, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xb9, 0x6d, 0x30, 0x96, 0x09, 0x01, 0x00, 0x00,
}
